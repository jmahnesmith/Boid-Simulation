{"version":3,"sources":["index.js"],"names":["main","scene","THREE","Scene","canvas","document","querySelector","renderer","setupRenderer","camera","setupCamera","controls","setupControls","domElement","setupLighting","setupSky","worldBounds","createWorldBounds","_setupBoidsAndObstacl","setupBoidsAndObstacles","_setupBoidsAndObstacl2","_slicedToArray","boids","obstacles","requestAnimationFrame","render","time","updateScene","getRandomColor","letters","color","i","Math","floor","random","makeObstacleInstance","radius","x","z","material","MeshToonMaterial","obstacle","Mesh","obstacleGeometry","scale","multiplyScalar","userData","phase","PI","add","position","set","sin","makeBoidInstance","boid","boidGeometry","velocity","Vector3","randomDirection","maxSpeed","minSpeed","spawnPoint","normalize","spawnRadius","y","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","toneMappingExposure","fov","aspect","near","far","PerspectiveCamera","OrbitControls","autoRotate","autoRotateSpeed","enablePan","ambientLight","AmbientLight","mainLight","DirectionalLight","sky","Sky","setScalar","sun","effectController","turbidity","rayleigh","mieCoefficient","mieDirectionalG","elevation","azimuth","exposure","uniforms","value","phi","MathUtils","degToRad","theta","setFromSphericalCoords","copy","size","geometry","BoxGeometry","edgeGeometry","EdgesGeometry","LineBasicMaterial","mesh","LineSegments","boidRadius","boidHeight","radialSegments","ConeGeometry","rotateX","obstacleRadius","obstacleDetail","IcosahedronGeometry","numberOfBoids","numberOfObstacles","push","update","resizeRendererToDisplaySize","clientWidth","clientHeight","updateProjectionMatrix","forEach","wrapAround","lookAt","clone","boundary","pixelRatio","window","devicePixelRatio","width","height","needResize","setSize"],"mappings":"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","file":"Boids.e31bb0bc.js","sourceRoot":"..","sourcesContent":["function main() {\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    const canvas = document.querySelector('#simulation-container');\r\n    const renderer = setupRenderer(canvas);\r\n    const camera = setupCamera();\r\n    const controls = setupControls(camera, renderer.domElement);\r\n\r\n    // Lighting and Sky\r\n    setupLighting(scene);\r\n    setupSky(scene, renderer, camera);\r\n\r\n    // World bounds\r\n    const worldBounds = 200;\r\n    createWorldBounds(scene, worldBounds);\r\n\r\n    // Boids and Obstacles\r\n    const [boids, obstacles] = setupBoidsAndObstacles(scene, worldBounds);\r\n\r\n    // Render loop\r\n    requestAnimationFrame(function render(time) {\r\n        updateScene(time, controls, renderer, camera, obstacles, boids);\r\n        renderer.render(scene, camera);\r\n        requestAnimationFrame(render);\r\n    });\r\n\r\n    function getRandomColor() {\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n    function makeObstacleInstance(color, radius, x, z) {\r\n        const material = new THREE.MeshToonMaterial({\r\n            color\r\n        });\r\n\r\n        const obstacle = new THREE.Mesh(obstacleGeometry, material);\r\n        obstacle.scale.multiplyScalar(radius);\r\n        obstacle.userData.radius = radius;\r\n        obstacle.userData.phase = Math.random() * Math.PI * 2;\r\n        scene.add(obstacle);\r\n\r\n        obstacle.position.set(x, Math.sin(obstacle.userData.phase) * worldBounds / 2, z);\r\n\r\n        return obstacle;\r\n    }\r\n\r\n    function makeBoidInstance(color) {\r\n        const material = new THREE.MeshToonMaterial({\r\n            color\r\n        });\r\n\r\n        const boid = new THREE.Mesh(boidGeometry, material);\r\n\r\n        boid.userData.velocity = new THREE.Vector3().randomDirection().multiplyScalar(Math.random() * (maxSpeed - minSpeed) + minSpeed);\r\n        \r\n        scene.add(boid);\r\n\r\n        let spawnPoint = new THREE.Vector3().randomDirection();\r\n        spawnPoint.normalize();\r\n        spawnPoint.multiplyScalar(Math.random() * spawnRadius);\r\n        \r\n        boid.position.x = spawnPoint.x;\r\n        boid.position.y = spawnPoint.y;\r\n        boid.position.z = spawnPoint.z;\r\n\r\n        return boid;\r\n    }\r\n}\r\n\r\nfunction setupRenderer(canvas) {\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, canvas });\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 0.75;\r\n    return renderer;\r\n}\r\n\r\nfunction setupCamera() {\r\n    const fov = 75;\r\n    const aspect = 2;  // canvas default\r\n    const near = 0.1;\r\n    const far = 5000;\r\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n    camera.position.set(133.33, 114.29, 133.33);\r\n    return camera;\r\n}\r\n\r\nfunction setupControls(camera, domElement) {\r\n    const controls = new OrbitControls(camera, domElement);\r\n    controls.autoRotate = true;\r\n    controls.autoRotateSpeed = 0.5;\r\n    controls.enablePan = false;\r\n    return controls;\r\n}\r\n\r\nfunction setupLighting(scene) {\r\n    const ambientLight = new THREE.AmbientLight(0x404040);\r\n    scene.add(ambientLight);\r\n\r\n    const mainLight = new THREE.DirectionalLight(0xFFFFFF, 1);\r\n    mainLight.position.set(-1, 2, 4);\r\n    scene.add(mainLight);\r\n}\r\n\r\nfunction setupSky(scene, renderer, camera) {\r\n    const sky = new Sky();\r\n    sky.scale.setScalar(450000);\r\n    scene.add(sky);\r\n\r\n    const sun = new THREE.Vector3();\r\n\r\n    // Sky and sun parameters\r\n    const effectController = {\r\n        turbidity: 6,\r\n        rayleigh: 0.25,\r\n        mieCoefficient: 0.001,\r\n        mieDirectionalG: 0.4,\r\n        elevation: 80,\r\n        azimuth: 0,\r\n        exposure: renderer.toneMappingExposure\r\n    };\r\n\r\n    // Update uniforms\r\n    const uniforms = sky.material.uniforms;\r\n    uniforms['turbidity'].value = effectController.turbidity;\r\n    uniforms['rayleigh'].value = effectController.rayleigh;\r\n    uniforms['mieCoefficient'].value = effectController.mieCoefficient;\r\n    uniforms['mieDirectionalG'].value = effectController.mieDirectionalG;\r\n\r\n    const phi = THREE.MathUtils.degToRad(90 - effectController.elevation);\r\n    const theta = THREE.MathUtils.degToRad(effectController.azimuth);\r\n    sun.setFromSphericalCoords(1, phi, theta);\r\n\r\n    uniforms['sunPosition'].value.copy(sun);\r\n    renderer.toneMappingExposure = effectController.exposure;\r\n    renderer.render(scene, camera);\r\n}\r\n\r\nfunction createWorldBounds(scene, worldBounds) {\r\n    const size = worldBounds;\r\n    const geometry = new THREE.BoxGeometry(size, size, size, 2, 2, 2);\r\n    const edgeGeometry = new THREE.EdgesGeometry(geometry);\r\n    const material = new THREE.LineBasicMaterial({ color: 0xFFFFFF });\r\n    const mesh = new THREE.LineSegments(edgeGeometry, material);\r\n    scene.add(mesh);\r\n}\r\n\r\nfunction setupBoidsAndObstacles(scene, worldBounds) {\r\n    // Boid parameters\r\n    const boidRadius = 1.0;\r\n    const boidHeight = 3.3;\r\n    const radialSegments = 9;\r\n    const boidGeometry = new THREE.ConeGeometry(boidRadius, boidHeight, radialSegments).rotateX(Math.PI / 2);\r\n\r\n    // Obstacle parameters\r\n    const obstacleRadius = 1;  \r\n    const obstacleDetail = 1;  \r\n    const obstacleGeometry = new THREE.IcosahedronGeometry(obstacleRadius, obstacleDetail);\r\n\r\n    // Common parameters for boids and obstacles\r\n    const maxSpeed = 1.0;\r\n    const minSpeed = 0.5;\r\n    const spawnRadius = worldBounds / 2;\r\n    const numberOfBoids = 500;\r\n    const numberOfObstacles = 15;\r\n\r\n    // Create boids\r\n    let boids = [];\r\n    for (let i = 0; i < numberOfBoids; i++) {\r\n        boids.push(makeBoidInstance(getRandomColor(), boidGeometry, maxSpeed, minSpeed, spawnRadius));\r\n    }\r\n\r\n    // Create obstacles\r\n    let obstacles = [];\r\n    for (let i = 0; i < numberOfObstacles; i++) {\r\n        obstacles.push(makeObstacleInstance(getRandomColor(), obstacleGeometry, obstacleRadius, worldBounds));\r\n    }\r\n\r\n    return [boids, obstacles];\r\n}\r\n\r\nfunction makeObstacleInstance(color, obstacleGeometry, radius, worldBounds) {\r\n    const material = new THREE.MeshToonMaterial({ color });\r\n    const obstacle = new THREE.Mesh(obstacleGeometry, material);\r\n    obstacle.scale.multiplyScalar(radius);\r\n    obstacle.userData.radius = radius;\r\n    obstacle.userData.phase = Math.random() * Math.PI * 2;\r\n    scene.add(obstacle);\r\n\r\n    const x = Math.random() * worldBounds - worldBounds / 2;\r\n    const z = Math.random() * worldBounds - worldBounds / 2;\r\n    obstacle.position.set(x, Math.sin(obstacle.userData.phase) * worldBounds / 2, z);\r\n\r\n    return obstacle;\r\n}\r\n\r\nfunction makeBoidInstance(color, boidGeometry, maxSpeed, minSpeed, spawnRadius) {\r\n    const material = new THREE.MeshToonMaterial({ color });\r\n    const boid = new THREE.Mesh(boidGeometry, material);\r\n    boid.userData.velocity = new THREE.Vector3().randomDirection().multiplyScalar(Math.random() * (maxSpeed - minSpeed) + minSpeed);\r\n    scene.add(boid);\r\n\r\n    const spawnPoint = new THREE.Vector3().randomDirection();\r\n    spawnPoint.normalize();\r\n    spawnPoint.multiplyScalar(Math.random() * spawnRadius);\r\n    boid.position.set(spawnPoint.x, spawnPoint.y, spawnPoint.z);\r\n\r\n    return boid;\r\n}\r\n\r\nfunction updateScene(time, controls, renderer, camera, obstacles, boids) {\r\n    time *= 0.001;\r\n    controls.update();\r\n\r\n    if (resizeRendererToDisplaySize(renderer)) {\r\n        const canvas = renderer.domElement;\r\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        camera.updateProjectionMatrix();\r\n    }\r\n\r\n    // Update obstacles - Example: making them move or change over time\r\n    obstacles.forEach((obstacle) => {\r\n        // Example: Oscillating the obstacles in the y-axis\r\n        obstacle.position.y = Math.sin(obstacle.userData.phase + time) * 50; \r\n    });\r\n\r\n    // Update boids - Implement the logic for boid movement\r\n    boids.forEach((boid) => {\r\n        // Implement boid behavior here\r\n        // Example: Adjusting boid velocity based on boid rules (alignment, cohesion, separation)\r\n\r\n        // Update boid position based on velocity\r\n        boid.position.add(boid.userData.velocity);\r\n\r\n        // Example: Boundary checks or wrapping logic\r\n        wrapAround(boid, 200); // Assuming 'wrapAround' is a function you implement\r\n\r\n        // Update boid rotation to face the direction of velocity\r\n        boid.lookAt(boid.position.clone().add(boid.userData.velocity));\r\n    });\r\n}\r\n\r\nfunction wrapAround(boid, boundary) {\r\n    if (boid.position.x > boundary) boid.position.x = -boundary;\r\n    else if (boid.position.x < -boundary) boid.position.x = boundary;\r\n\r\n    if (boid.position.y > boundary) boid.position.y = -boundary;\r\n    else if (boid.position.y < -boundary) boid.position.y = boundary;\r\n\r\n    if (boid.position.z > boundary) boid.position.z = -boundary;\r\n    else if (boid.position.z < -boundary) boid.position.z = boundary;\r\n}\r\n\r\nfunction resizeRendererToDisplaySize(renderer) {\r\n    const canvas = renderer.domElement;\r\n    const pixelRatio = window.devicePixelRatio;\r\n    const width = canvas.clientWidth * pixelRatio | 0;\r\n    const height = canvas.clientHeight * pixelRatio | 0;\r\n    const needResize = canvas.width !== width || canvas.height !== height;\r\n    if (needResize) {\r\n        renderer.setSize(width, height, false);\r\n    }\r\n    return needResize;\r\n}\r\n\r\nmain();"]}